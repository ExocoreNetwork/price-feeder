// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: service.proto

package debugger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PriceSubmitService_SubmitPrice_FullMethodName = "/proto.debugger.v1.PriceSubmitService/SubmitPrice"
)

// PriceSubmitServiceClient is the client API for PriceSubmitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceSubmitServiceClient interface {
	SubmitPrice(ctx context.Context, in *SubmitPriceRequest, opts ...grpc.CallOption) (*SubmitPriceResponse, error)
}

type priceSubmitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceSubmitServiceClient(cc grpc.ClientConnInterface) PriceSubmitServiceClient {
	return &priceSubmitServiceClient{cc}
}

func (c *priceSubmitServiceClient) SubmitPrice(ctx context.Context, in *SubmitPriceRequest, opts ...grpc.CallOption) (*SubmitPriceResponse, error) {
	out := new(SubmitPriceResponse)
	err := c.cc.Invoke(ctx, PriceSubmitService_SubmitPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PriceSubmitServiceServer is the server API for PriceSubmitService service.
// All implementations must embed UnimplementedPriceSubmitServiceServer
// for forward compatibility
type PriceSubmitServiceServer interface {
	SubmitPrice(context.Context, *SubmitPriceRequest) (*SubmitPriceResponse, error)
	mustEmbedUnimplementedPriceSubmitServiceServer()
}

// UnimplementedPriceSubmitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPriceSubmitServiceServer struct {
}

func (UnimplementedPriceSubmitServiceServer) SubmitPrice(context.Context, *SubmitPriceRequest) (*SubmitPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPrice not implemented")
}
func (UnimplementedPriceSubmitServiceServer) mustEmbedUnimplementedPriceSubmitServiceServer() {}

// UnsafePriceSubmitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceSubmitServiceServer will
// result in compilation errors.
type UnsafePriceSubmitServiceServer interface {
	mustEmbedUnimplementedPriceSubmitServiceServer()
}

func RegisterPriceSubmitServiceServer(s grpc.ServiceRegistrar, srv PriceSubmitServiceServer) {
	s.RegisterService(&PriceSubmitService_ServiceDesc, srv)
}

func _PriceSubmitService_SubmitPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceSubmitServiceServer).SubmitPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceSubmitService_SubmitPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceSubmitServiceServer).SubmitPrice(ctx, req.(*SubmitPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PriceSubmitService_ServiceDesc is the grpc.ServiceDesc for PriceSubmitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceSubmitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.debugger.v1.PriceSubmitService",
	HandlerType: (*PriceSubmitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitPrice",
			Handler:    _PriceSubmitService_SubmitPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
